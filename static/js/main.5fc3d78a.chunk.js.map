{"version":3,"sources":["Button.js","index.js"],"names":["Button","className","this","props","light","onClick","React","Component","Index","state","color","handleClick","bind","ary","join","formatColor","document","body","style","background","reduce","a","b","random","i","push","Math","floor","setState","chooseColor","ret","isLight","applyColor","ReactDOM","render","getElementById"],"mappings":"qNAGaA,EAAb,4JACC,WACC,OACC,wBACCC,UAAYC,KAAKC,MAAMC,MAAQ,eAAiB,cAC5CC,QAASH,KAAKC,MAAME,QAFzB,yBAHH,GAA4BC,IAAMC,WCE5BC,E,kDACJ,WAAYL,GAAO,IAAD,8BAChB,cAAMA,IACDM,MAAQ,CAAEC,MAAO,CAAC,GAAI,GAAI,KAC/B,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAHH,E,+CAQlB,SAAYC,GACV,MAAO,OAASA,EAAIC,KAAK,MAAQ,M,wBAKnC,WACE,IAAMJ,EAAQR,KAAKa,YAAYb,KAAKO,MAAMC,OAC1CM,SAASC,KAAKC,MAAMC,WAAaT,I,qBAEnC,WAEE,OADYR,KAAKO,MAAMC,MACZU,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAEC,KAAK,M,yBAGrC,WAEE,IADA,IAAMC,EAAS,GACPC,EAAI,EAAGA,EAAI,EAAGA,IACpBD,EAAOE,KAAKC,KAAKC,MAAsB,IAAhBD,KAAKH,WAE9B,OAAOA,I,yBAET,WACIrB,KAAK0B,SAAS,CAAClB,MAAOR,KAAK2B,kB,oBAG/B,WACE,IAAMC,EAAM5B,KAAKa,YAAYb,KAAKO,MAAMC,OACxC,OACE,gCACE,qBAAIT,UAAWC,KAAK6B,UAAY,QAAU,QAA1C,2BACeD,KAEf,cAAC,EAAD,CAAQ1B,MAAOF,KAAK6B,UACpB1B,QAASH,KAAKS,mB,+BAKpB,WACET,KAAK8B,e,gCAEP,WACE9B,KAAK8B,iB,GApDW1B,IAAMC,WAyD1B0B,IAASC,OACP,cAAC,EAAD,IACAlB,SAASmB,eAAe,U","file":"static/js/main.5fc3d78a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css'\nimport './index.css'\nexport class Button extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<button \n\t\t\t\tclassName={ this.props.light ? 'light-button' : 'dark-button' }\n        onClick={this.props.onClick}>\n\t\t\t\tRefresh\n\t\t\t</button>\n\t\t);\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Button} from './Button'\nimport './App.css'\nimport './index.css'\nclass Index extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = { color: [50, 50, 34]}\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  //react builtin method, invoked immediately after a component is mounted(ineserted into the tree)\n  \n  formatColor(ary) {\n    return 'rgb(' + ary.join(', ') + ')';\n  }\n\n  \n\n  applyColor() {\n    const color = this.formatColor(this.state.color);\n    document.body.style.background = color;\n  }\n  isLight() {\n    const rgb = this.state.color;\n    return rgb.reduce((a, b) => a+b) < 127 *3\n  }\n\n  chooseColor() {\n    const random = [];\n    for(let i = 0; i < 3; i++){\n      random.push(Math.floor(Math.random() * 256))\n    }\n    return random;\n  }\n  handleClick(){\n      this.setState({color: this.chooseColor()})\n  };\n\n  render() {\n    const ret = this.formatColor(this.state.color)\n    return (\n      <div>\n        <h1 className={this.isLight() ? 'white' : 'black'}>\n        Your color is {ret}\n        </h1>\n        <Button light={this.isLight()}\n        onClick={this.handleClick}  \n        />\n      </div>\n    );\n  }\n  componentDidMount() {\n    this.applyColor();\n  }\n  componentDidUpdate(){\n    this.applyColor()\n  }\n   \n}\n\nReactDOM.render(\n  <Index />, \n  document.getElementById('root')\n);"],"sourceRoot":""}